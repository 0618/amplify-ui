import fs from 'fs';
import path from 'path';
import { Node, Project, Symbol, Type, VariableDeclaration } from 'ts-morph';
import { globbyStream } from 'globby';
import json2md from 'json2md';

const project = new Project({
  tsConfigFilePath: path.resolve(
    __dirname,
    '../../packages/react/tsconfig.json'
  ),
});

const allTypeFilesData = new Map();

const source = project.getSourceFile(
  path.resolve(__dirname, '../../packages/react/src/primitives/types/index.ts')
);

const allTypeFiles = source.getReferencedSourceFiles();

allTypeFiles.forEach((typeFile) => {
  const typeFileName = typeFile
    .getBaseName()
    .slice(0, typeFile.getBaseName().indexOf('.ts'));
  const typeFileData = new Map();
  const typeAliases = typeFile.getTypeAliases();
  const propsTable = {
    headers: ['Name', 'Type', 'Description'],
    rows: [],
  };
  if (typeAliases) {
    typeAliases.forEach((typeAlias) => {
      const typeAliasData = new Map();
      const typeAliasJsDocs = typeAlias.getJsDocs();
      const typeAliasDescription = typeAliasJsDocs[0]?.getDescription() ?? '-';
      const typeAliasName = typeAlias.getNameNode().getText() ?? '-';
      const typeAliasType = typeAlias.getTypeNode().getText() ?? '-';
      typeAliasData.set('name', typeAliasName);
      typeAliasData.set('type', typeAliasType);
      typeAliasData.set('description', typeAliasDescription);
      typeFileData.set(typeAliasName, typeAliasData);
      propsTable.rows.push([
        sanitize(typeAliasName),
        sanitize(typeAliasType),
        sanitize(typeAliasDescription),
      ]);
    });
  }

  typeFile.getInterfaces().forEach((typeInterface) => {
    typeInterface.getProperties().forEach((typeProperty) => {
      const typeInterfaceData = new Map();
      const propertyJsDocs = typeProperty.getJsDocs()[0];
      const propertyDescription = propertyJsDocs?.getDescription() ?? '-';
      const propertyName = typeProperty.getNameNode().getText() ?? '-';
      const propertyType = typeProperty.getTypeNode().getText() ?? '-';
      typeInterfaceData.set('name', propertyName);
      typeInterfaceData.set('type', propertyType);
      typeInterfaceData.set('description', propertyDescription);
      typeFileData.set(propertyName, typeInterfaceData);
      propsTable.rows.push([
        sanitize(propertyName),
        sanitize(propertyType),
        sanitize(propertyDescription),
      ]);
    });
  });

  allTypeFilesData.set(typeFileName, { typeFileData, propsTable });
});

console.log(allTypeFilesData);

const createAllPropsTables = async () => {
  for await (const componentFilepath of globbyStream(
    path.join(
      __dirname,
      '../../docs/src/pages/[platform]/components/*/index.page.mdx'
    )
  )) {
    const regex =
      /src\/pages\/\[platform\]\/components\/(\w*)\/index\.page\.mdx/;
    const componentName = (componentFilepath as string).match(regex)[1];
    const propsTable = allTypeFilesData.get(componentName)?.propsTable;

    const output = getOutput(componentName, propsTable);

    fs.writeFileSync(
      path.resolve(
        __dirname,
        `../../docs/src/pages/[platform]/components/${componentName}`,
        `./react-auto-prop-table-${componentName}.mdx`
      ),
      output
    );
    console.log(`âœ… ${componentName} Props Tables are updated.`);
  }
};

createAllPropsTables();

json2md.converters.plainText = (text, json2md) => text;

function getOutput(displayName, propsTable) {
  return json2md([
    {
      plainText: `
{/* DO NOT EDIT DIRECTLY */}
{/* This file is autogenerated by "docs/script/generatePropsTables.mjs" script. */}
{/* See Docs README to generate */}
`,
    },
    { h2: `${displayName} Props` },
    {
      table: propsTable,
    },
  ]);
}

/**
 * @name sanitize
 * @description treat special characters
 * 1) "|", "<", ">", "`" => replace with character code, "&$<unicode>;"
 * 2) "' + '" => replace with space
 * 3) "\n" => replace with space
 */
function sanitize(string) {
  const tobeEncoded = new RegExp(/[|<>`]|'\s\+\s'|\\n/g);
  const getEncoded = (match) =>
    match.match(/[|<>`]/) ? `&#${match.charCodeAt()};` : ' ';

  return string.replaceAll(tobeEncoded, getEncoded);
}
