# Description: this workflow runs build mega-apps that have all the connected components.

name: Mega App Canary - CRA

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

on:
  push:
    branches:
      - 'mega-app-canary'

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ci
    strategy:
      fail-fast: false
      matrix:
        framework: [react]
        framework-version: [16, latest]
        build-tool: [cra]
        build-tool-version: [latest]
        pkg-manager: [npm]
        language: [ts]
        node-version: [16, 18]
        include:
          - framework: react
            framework-version: latest
            build-tool: cra
            build-tool-version: 5
            pkg-manager: npm
            language: js # Target variable
            node-version: 18
          - framework: react
            framework-version: latest
            build-tool: cra
            build-tool-version: 5
            pkg-manager: 'yarn' # Target variable
            language: ts
            node-version: 18
          - framework: react
            framework-version: 17
            build-tool: next # Target variable
            build-tool-version: 11
            pkg-manager: npm
            language: ts
            node-version: 16
          - framework: react
            framework-version: latest
            build-tool: next # Target variable
            build-tool-version: 13
            pkg-manager: npm
            language: ts
            node-version: 18
          # - framework: react
          #   framework-version: latest
          #   build-tool: gatsby
          #   build-tool-version: latest
          #   pkg-manager: npm
          #   language: ts
          #   node-version: 18
          - framework: react
            framework-version: latest
            build-tool: vite
            build-tool-version: latest
            pkg-manager: npm
            language: ts
            node-version: 18

    env:
      MEGA_APP_NAME: ${{ matrix.framework }}-${{ matrix.framework-version }}-${{ matrix.build-tool }}-${{ matrix.build-tool-version }}-${{ matrix.language }}
      DEPENDENCIES: react@${{ matrix.framework-version }} react-dom@${{ matrix.framework-version }} @aws-amplify/ui-react aws-amplify
      DEP_TYPES: '@types/react@${{ matrix.framework-version }} @types/react-dom@${{ matrix.framework-version }}'

    steps:
      - name: Checkout Amplify UI
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Setup Node.js ${{ matrix.node-version }} with  ${{ matrix.pkg-manager }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ matrix.pkg-manager }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2
      - name: Install build-system-tests package
        uses: ./.github/actions/install-with-retries
        with:
          working-directory: ./build-system-tests
      - name: Add Amplify CLI
        run: yarn global add @aws-amplify/cli
      - name: Get CLI versions
        id: cli-version
        run: echo "version=$(amplify --version)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          role-to-assume: ${{ secrets.AUTH_E2E_ROLE_ARN }}
      # Amplify CLI does not support headless pull with temporary credentials
      # when useProfile is false.
      # See: https://github.com/aws-amplify/amplify-cli/issues/11009.
      - name: Create temp AWS profile
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && \
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && \
          aws configure set aws_session_token $AWS_SESSION_TOKEN && \
          aws configure set default.region $AWS_REGION
      - name: Pull down AWS environments
        run: yarn pull
        working-directory: build-system-tests
      - name: Delete AWS Profile
        run: rm -rf ~/.aws
      - name: Create MegaApp ${{ matrix.framework }}-${{ matrix.framework-version }}-${{ matrix.build-tool }}-${{ matrix.build-tool-version }}-${{ matrix.language }}
        run: |
          mkdir -p mega-apps/
          if ${{ matrix.build-tool == 'cra' && matrix.language == 'js' }};then
            npx create-react-app mega-apps/$MEGA_APP_NAME
          fi

          if ${{ matrix.build-tool == 'cra' && matrix.language == 'ts' }};then
            npx create-react-app mega-apps/$MEGA_APP_NAME --template typescript
          fi

          if ${{ matrix.build-tool == 'next' }};then
            npx create-next-app mega-apps/$MEGA_APP_NAME --ts --no-src-dir --no-experimental-app --no-eslint
          fi

          if ${{ matrix.build-tool == 'gatsby' }};then
            cd mega-apps
            npx create-gatsby@latest -y $MEGA_APP_NAME
            cd ..
          fi

          if ${{ matrix.build-tool == 'vite' }};then
            cd mega-apps
            npm create vite@${{ matrix.build-tool-version }} $MEGA_APP_NAME -- --template react-ts
            cd ..
          fi
        working-directory: build-system-tests
      - name: Copy aws_export and App.js
        run: |
          if ${{ matrix.build-tool == 'cra' }};then
            cp environments/src/aws-exports.js mega-apps/$MEGA_APP_NAME/src
            if ${{ matrix.language == 'js' }};then
              cp templates/components/react/cra/App.js mega-apps/$MEGA_APP_NAME/src/App.js
            else
              cp templates/components/react/cra/App.js mega-apps/$MEGA_APP_NAME/src/App.tsx
              if ${{ matrix.framework-version == '16' }};then
                cp templates/components/react/cra/index-react-${{ matrix.framework-version }}.js mega-apps/$MEGA_APP_NAME/src/index.tsx
              fi
            fi
          fi

          if ${{ matrix.build-tool == 'next' }};then
            mkdir mega-apps/$MEGA_APP_NAME/data
            cp environments/src/aws-exports.js mega-apps/$MEGA_APP_NAME/data
            echo "copied data/aws-exports.js"
            cp templates/components/react/next/App.js mega-apps/$MEGA_APP_NAME/pages/index.tsx
            echo "copied App.js to pages/index.tsx"
            if ${{ matrix.build-tool-version == '11' }};then
                cp templates/components/react/next/template-package-${{ matrix.build-tool-version }}.json mega-apps/$MEGA_APP_NAME/package.json
                echo "copied template-package-11.json to package.json"
                cp templates/components/react/next/template-tsconfig-${{ matrix.build-tool-version }}.json mega-apps/$MEGA_APP_NAME/tsconfig.json
                echo "copied template-tsconfig-11.json to tsconfig.json"
            fi
          fi

          if ${{ matrix.build-tool == 'gatsby' }};then
            environments/src/aws-exports.js mega-apps/$MEGA_APP_NAME/src/pages
            cp templates/components/react/cra/App.js mega-apps/$MEGA_APP_NAME/src/pages/index.tsx
          fi

          if ${{ matrix.build-tool == 'vite' }};then
            cp environments/src/aws-exports.js mega-apps/$MEGA_APP_NAME/src
            cp templates/components/react/cra/App.js mega-apps/$MEGA_APP_NAME/src/App.tsx
            cp templates/components/react/vite/index.html mega-apps/$MEGA_APP_NAME/index.html
            cp templates/components/react/vite/template-tsconfig.json mega-apps/$MEGA_APP_NAME/tsconfig.json
            cp templates/components/react/vite/vite.config.ts mega-apps/$MEGA_APP_NAME/vite.config.ts
          fi
        working-directory: build-system-tests
      - name: Install @aws-amplify/ui-react aws-amplify and build
        run: |
          if ${{ matrix.pkg-manager == 'yarn' }};then
            if ${{ matrix.build-tool == 'cra' && matrix.language == 'ts' }};then
              yarn add $DEP_TYPES
            fi
            yarn add $DEPENDENCIES
            yarn build
          else
            if ${{ matrix.build-tool == 'cra' && matrix.language == 'ts' }};then
              npm install $DEP_TYPES
            fi
            if ${{ matrix.build-tool == 'next' && matrix.build-tool-version == '11' }};then
              rm -rf node_modules
              echo "removed node_modules"
            fi
            npm install $DEPENDENCIES
            npm run build
          fi
        working-directory: build-system-tests/mega-apps/${{ matrix.framework }}-${{ matrix.framework-version }}-${{ matrix.build-tool }}-${{ matrix.build-tool-version }}-${{ matrix.language }}
